name: Release

on:
  push:
    branches:
      - develop
      - main

jobs:
  quick-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - uses: actions/cache@v2
        id: module-cache
        with:
          path: node_modules
          key: modules-14-${{ hashFiles('**/package-lock.json') }}
      - name: npm ci
        if: steps.module-cache.outputs.cache-hit != 'true'
        run: npm ci
      - run: npm run lint
      - run: npm run build

  generate-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        id: module-cache
        with:
          path: node_modules
          key: modules-${{ hashFiles('**/package-lock.json') }}
      - name: install dependencies
        run: npm ci
        if: steps.module-cache.outputs.cache-hit != 'true'
      - name: set version
        id: version
        run: |
          mkdir ./artifact
          node ./.github/workflows/get-version.js
          echo "$(jq ".version = \"$(cat ./version)\"" package.json )" > ./artifact/package.json
          echo "$(jq ".version = \"$(cat ./version)\"" package-lock.json )" > ./artifact/package-lock.json
          rm -f ./version
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - uses: actions/upload-artifact@v1
        with:
          name: version
          path: ./artifact

  build-containers:
    runs-on: ubuntu-latest
    needs: [ quick-check, generate-version ]
    strategy:
      matrix:
        image: [ x86_64, arm64, aarch64, amd64, i386 ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: version
      - name: prepare, build & test
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u sebbo2002 --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u sebbo2002 --password-stdin docker.pkg.github.com

          docker pull multiarch/qemu-user-static:register
          docker run --rm --privileged multiarch/qemu-user-static:register --reset

          VERSION=$(cat ./version/release.json| jq .version -r)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)

          mv -f ./version/package.json ./
          mv -f ./version/package-lock.json ./
          rm -rf ./version

          echo "------"
          echo "Version: ${VERSION}"
          echo "Branch: ${GITHUB_REF#refs/heads/}"
          echo "Flavour: ${{ matrix.image }}"
          echo "------"

          if [[ "${BRANCH}" == "main" ]]
          then
             CLIENT_TAG="latest"
             DOCKER_TAG="latest"
          else
             CLIENT_TAG="next"
             DOCKER_TAG="next"
          fi

          docker pull "multiarch/alpine:${{ matrix.image }}-latest-stable"
          docker pull "sebbo2002/pyatv-mqtt-bridge:next-${{ matrix.image }}-base" || true
          docker pull "sebbo2002/pyatv-mqtt-bridge:next-${{ matrix.image }}" || true

          docker build \
              --target build-container \
              --build-arg BASEIMAGE="multiarch/alpine:${{ matrix.image }}-latest-stable" \
              --cache-from "sebbo2002/pyatv-mqtt-bridge:next-${{ matrix.image }}-base" \
              -t "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}-base" .

          docker build \
              --build-arg BASEIMAGE="multiarch/alpine:${{ matrix.image }}-latest-stable" \
              --cache-from "sebbo2002/pyatv-mqtt-bridge:next-${{ matrix.image }}-base" \
              --cache-from "sebbo2002/pyatv-mqtt-bridge:next-${{ matrix.image }}" \
              -t "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}" .

          docker tag "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}" "sebbo2002/pyatv-mqtt-bridge:${DOCKER_TAG}-${{ matrix.image }}"
          docker tag "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}-base" "sebbo2002/pyatv-mqtt-bridge:${DOCKER_TAG}-${{ matrix.image }}-base"

          docker tag "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}" "docker.pkg.github.com/sebbo2002/pyatv-mqtt-bridge/${{ matrix.image }}:${VERSION}"
          docker tag "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}" "docker.pkg.github.com/sebbo2002/pyatv-mqtt-bridge/${{ matrix.image }}:${DOCKER_TAG}"

          docker push "sebbo2002/pyatv-mqtt-bridge:${VERSION}-${{ matrix.image }}"
          docker push "sebbo2002/pyatv-mqtt-bridge:${DOCKER_TAG}-${{ matrix.image }}"
          docker push "sebbo2002/pyatv-mqtt-bridge:${DOCKER_TAG}-${{ matrix.image }}-base"

          docker push "docker.pkg.github.com/sebbo2002/pyatv-mqtt-bridge/${{ matrix.image }}:${VERSION}"
          docker push "docker.pkg.github.com/sebbo2002/pyatv-mqtt-bridge/${{ matrix.image }}:${DOCKER_TAG}"
        env:
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  release:
    runs-on: ubuntu-latest
    needs: [build-containers]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/cache@v2
        id: module-cache
        with:
          path: node_modules
          key: modules-14-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/download-artifact@v1
        with:
          name: version
      - name: install dependencies
        if: steps.module-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: docker login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u sebbo2002 --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u sebbo2002 --password-stdin docker.pkg.github.com
      - name: semantic-release
        run: NPM_TOKEN=$NODE_AUTH_TOKEN npx semantic-release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
